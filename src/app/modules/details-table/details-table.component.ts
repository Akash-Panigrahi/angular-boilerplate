import {
    Component, OnInit, Input, OnChanges, SimpleChanges, EventEmitter, Output, ViewChild, HostListener
} from '@angular/core';

import { NgProgressComponent } from '@ngx-progressbar/core';
import { AgGridEvent, GridApi, ColumnApi } from 'ag-grid-community';
import { takeWhile, endWith, tap } from 'rxjs/operators';
import { NgbPagination } from '@ng-bootstrap/ng-bootstrap';

import { StateService } from 'src/app/core/services/state/state.service';
import { ISortEvent, IDetailsTableData, IDetailsTableRequest } from 'src/app/core/interfaces/details-table.interface';

import { isInitialTableReady__Table, gettingDetailsLoader, showOverlay } from './details-table.animations';
import { environment } from 'src/environments/environment';

@Component({
    selector: 'app-details-table',
    templateUrl: './details-table.component.html',
    styleUrls: ['./details-table.component.scss'],
    animations: [
        isInitialTableReady__Table,
        gettingDetailsLoader,
        showOverlay
    ]
})
export class DetailsTableComponent implements OnInit, OnChanges {

    @Input()
    details: IDetailsTableRequest[];

    @Output()
    detailsTableRequestEvent = new EventEmitter<IDetailsTableRequest>();

    // getting a reference to the progress bar in the html file
    @ViewChild('gettingDetailsBar')
    private _progressBar: NgProgressComponent;

    @ViewChild('detailsTablePagination')
    private _detailsTablePagination: NgbPagination;

    private _currentDetails = null;
    initialPageSize = 5;
    pageSetTrigger = true;

    detailsTableRequest = {
        start: 0,
        length: this.initialPageSize,
        search: '',
        sort: {
            sortKey: 'id',
            sortDir: 0
        }
    };

    recordsInfo = {
        from: 0,
        to: 0,
        total: 0
    };

    isInitialTableReady = 'no';
    isInitialTableReady__Table = 'no';

    detailsData: IDetailsTableData[];
    gridApi: GridApi;
    gridColumnApi: ColumnApi;

    pageSizes = [3, 5, 10, 25, 50, 100];
    paginationCollectionSize;

    @HostListener('detailsTableSortChangeEvent', ['$event.detail'])
    private _onDetailsTableSortChange(detail) {
        this.onSortChange(detail);
    }

    private _emitDataTableRequestEvent(): void {
        /*
            subsequent event requests generated by:
            1 - pagination button click **onPageChange**
            2 - display length change through **onLengthChange**
            3 - searching through table **onSearchChange**
            4 - sorting table **onSortChange**
        */

        this.detailsTableRequestEvent.emit(this.detailsTableRequest);
        this.gridApi.showLoadingOverlay();
    }

    onIsInitialTableReady__Table(event) {

        // console.group(`${event.phaseName} animating`);
        // console.log(event);
        // console.log('From:', event.fromState);
        // console.log('To:', event.toState);
        // console.log('Total Time:', event.totalTime);
        // console.groupEnd();
    }

    constructor(
        private _state: StateService
    ) { }

    ngOnInit() { }

    ngOnChanges(changes: SimpleChanges): void {

        if (!changes.details.isFirstChange()) {

            this._currentDetails = changes.details.currentValue;

            const details = changes.details.currentValue;

            this.detailsData = details.data;
            this.recordsInfo = details.info;

            let pages = 1;

            pages = details.info.total % this.detailsTableRequest.length >= 5
                ? Math.ceil(details.info.total / this.detailsTableRequest.length)
                : Math.floor(details.info.total / this.detailsTableRequest.length)
                ;

            this.paginationCollectionSize = (pages || 1) * 10;

            if (this.gridColumnApi) {
                this.gridColumnApi.autoSizeAllColumns();
            }

            // completing progress bar
            if (this._progressBar) {

                this._progressBar.state$
                    .pipe(
                        // tap(console.log),
                        takeWhile(value => !value.active),
                        endWith({ active: true, transform: '' })
                    )
                    .subscribe(() => this._progressBar.complete())
                    ;
            }
        }
    }

    isGettingDetailsLoaderDone(e): void {

        if (e.fromState === 'void' && e.toState === 'no') {
            // calling starting progress bar
            this._progressBar.start();
        }

        if (e.fromState === 'no' && e.toState === 'void') {
            this.isInitialTableReady__Table = 'yes';
        }
    }

    gettingDetailsBarCompleted(): void {
        this.isInitialTableReady = 'yes';
    }

    onGridReady(e: AgGridEvent): void {
        this.gridApi = e.api;
        this.gridColumnApi = e.columnApi;
    }

    onLengthChange(length: string): void {

        this.detailsTableRequest = {
            start: 0,
            length: Number(length),
            search: this.detailsTableRequest.search,
            sort: {
                sortKey: 'id',
                sortDir: -1
            }
        };

        this._state.setState('details-table-request', this.detailsTableRequest);

        this._detailsTablePagination.selectPage(1);
        this.pageSetTrigger = !this.pageSetTrigger;

        this._emitDataTableRequestEvent();
    }

    onSearchChange(text: string): void {
        this.detailsTableRequest.search = text.toLowerCase();
        this._emitDataTableRequestEvent();
    }

    onPageChange(page: number): void {
        this.detailsTableRequest.start = page - 1;
        this._emitDataTableRequestEvent();
    }

    onSortChange(sort: ISortEvent): void {
        this.detailsTableRequest.sort = sort;
        this._emitDataTableRequestEvent();
    }

    downloadDetails() {

        const { startDate, startTime, endDate, endTime } = this._state.getState('date-time-range');
        const { start, length, search, sort } = this.detailsTableRequest;

        const query = `?startDate=${startDate}&startTime=${startTime}&endDate=${endDate}&endTime=${endTime}&start=${start}&length=${length}&search=${search}&sort=${sort}`;

        window.open(`${environment.BASE_URL}/get-details-file${query}`, '_blank');
    }
}
